--- node_modules/@vscode/vscode-languagedetection/lib/index.ts	2024-03-01 19:07:42
+++ src/vscode-languagedetection/index.ts	2024-03-02 00:35:07
@@ -1,6 +1,12 @@
+// This file is ported from [vscode-languagedetection](https://github.com/microsoft/vscode-languagedetection)
+// The original file is located at https://github.com/microsoft/vscode-languagedetection/blob/main/lib/index.ts
+// Licensed under the MIT License.
+
 import { Rank, tensor, Tensor, io, setBackend, env } from '@tensorflow/tfjs-core';
 import { GraphModel, loadGraphModel } from '@tensorflow/tfjs-converter';
 import '@tensorflow/tfjs-backend-cpu';
+import NODE_MODEL_JSON from "./model.json";
+import NODE_WEIGHTS from "./group1-shard1of1.bin";
 
 export interface ModelResult {
 	languageId: string;
@@ -83,33 +89,15 @@
 	private static DEFAULT_MIN_CONTENT_SIZE = 20;
 
 	private static NODE_MODEL_JSON_FUNC: () => Promise<{ [key:string]: any }> = async () => {
-		const fs = await import('fs');
-		const path = await import('path');
-
 		return new Promise<any>((resolve, reject) => {
-			fs.readFile(path.join(__dirname, '..', '..', 'model', 'model.json'), (err, data) => {
-				if(err) {
-					reject(err);
-					return;
-				}
-				resolve(JSON.parse(data.toString()));
+			resolve(NODE_MODEL_JSON);
 			});
-		});
 	}
 
 	private static NODE_WEIGHTS_FUNC: () => Promise<ArrayBuffer> = async () => {
-		const fs = await import('fs');
-		const path = await import('path');
-
 		return new Promise<ArrayBuffer>((resolve, reject) => {
-			fs.readFile(path.join(__dirname, '..', '..', 'model', 'group1-shard1of1.bin'), (err, data) => {
-				if(err) {
-					reject(err);
-					return;
-				}
-				resolve(data.buffer);
+			resolve(NODE_WEIGHTS);
 			});
-		});
 	}
 
 	private _model: GraphModel | undefined;
